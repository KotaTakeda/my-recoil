{"version":3,"sources":["App.jsx","TodoList/states/RecoilKeys.ts","TodoList/states/todoList.ts","TodoList/index.jsx","index.js"],"names":["App","CharacterCounter","textState","atom","key","default","TextInput","CharacterCount","useRecoilState","text","setText","type","value","onChange","event","target","charCountState","selector","get","length","count","useRecoilValue","RecoilAtomKeys","RecoilSelectorKeys","todoListState","TODO_LIST_STATE","todoListFilterState","TODO_LIST_FILTER_STATE","filteredTodoListState","FILTERED_TODO_LIST_STATE","filter","list","item","isComplete","todoListStatsState","TODO_LIST_SRTATS_STATE","todoList","totalNum","totalCompletedNum","totalUncompletedNum","percentCompleted","TodoListApp","DebugObserver","TodoListStats","TodoListFilters","TodoItemCreator","TodoList","map","todoItem","TodoItem","id","formattedPercentCompleted","Math","round","setFilter","useState","inputValue","setInputValue","setTodoList","useSetRecoilState","onClick","oldTodoList","useRecoilSnapshot","index","findIndex","listItem","newList","replaceItemAtIndex","checked","arr","slice","removeItemAtIndex","newValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.627934fe.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\n\nexport default function App() {\n  return (\n    <RecoilRoot>\n      <CharacterCounter />\n    </RecoilRoot>\n  );\n}\n\nconst textState = atom({\n  key: 'textState',\n  default: '',\n});\n\nfunction CharacterCounter() {\n  return (\n    <div>\n      <TextInput />\n      <CharacterCount />\n    </div>\n  );\n}\n\nfunction TextInput() {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={onChange} />\n      <br />\n      Echo: {text}\n    </div>\n  );\n}\n\nconst charCountState = selector({\n  key: 'charCountState',\n  get: ({get}) => {\n    const text = get(textState);\n\n    return text.length;\n  },\n});\n\nfunction CharacterCount() {\n  const count = useRecoilValue(charCountState);\n\n  return <>Character Count: {count}</>;\n}","export enum RecoilAtomKeys {\n  TODO_LIST_STATE = 'todoListState',\n  TODO_LIST_FILTER_STATE = 'todoListFilterState',\n}\n\nexport enum RecoilSelectorKeys {\n  FILTERED_TODO_LIST_STATE = 'filteredTodoListState',\n  TODO_LIST_SRTATS_STATE = 'todoListStatsState',\n}","import { atom, selector } from \"recoil\";\nimport { RecoilAtomKeys, RecoilSelectorKeys } from \"./RecoilKeys\";\n\ntype TodoItem = {\n  id: number,\n  text: string,\n  isComplete: boolean,\n}\n\ntype todoListStats = {\n  totalNum: number,\n  totalCompletedNum: number,\n  totalUncompletedNum: number,\n  percentCompleted: number,\n}\n\nexport const todoListState = atom<TodoItem[]>({\n  key: RecoilAtomKeys.TODO_LIST_STATE,\n  default: [],\n});\n\nexport const todoListFilterState = atom<string>({\n  key: RecoilAtomKeys.TODO_LIST_FILTER_STATE,\n  default: 'Show All',\n});\n\nexport const filteredTodoListState = selector<TodoItem[]>({\n  key: RecoilSelectorKeys.FILTERED_TODO_LIST_STATE,\n  get: ({get}) => {\n    const filter = get(todoListFilterState);\n    const list = get(todoListState);\n\n    switch (filter) {\n      case 'Show Completed':\n        return list.filter((item) => item.isComplete);\n      case 'Show Uncompleted':\n        return list.filter((item) => !item.isComplete);\n      default:\n        return list;\n    }\n  },\n});\n\nexport const todoListStatsState = selector<todoListStats>({\n  key: RecoilSelectorKeys.TODO_LIST_SRTATS_STATE,\n  get: ({get}) => {\n    const todoList = get(todoListState);\n    const totalNum = todoList.length;\n    const totalCompletedNum = todoList.filter((item) => item.isComplete).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum * 100;\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n});","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  RecoilRoot,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n  useRecoilSnapshot,\n} from 'recoil';\nimport { \n  todoListState,\n  todoListFilterState,\n  filteredTodoListState,\n  todoListStatsState,\n} from \"./states/todoList\";\n\nexport default function TodoListApp() {\n  return (\n    <RecoilRoot>\n      {/* Debug用 */}\n      <DebugObserver />\n      <div>Todo List</div>\n      <TodoListStats />\n      <TodoListFilters />\n      <TodoItemCreator />\n      <TodoList />\n    </RecoilRoot>\n  );\n}\n\nfunction TodoList() {\n  const todoList = useRecoilValue(filteredTodoListState);\n\n  return (\n    <>\n      {todoList.map((todoItem) => (\n        <TodoItem key={todoItem.id} item={todoItem} />\n      ))}\n    </>\n  );\n}\n\n// =================================================================\n// この実装だとTodoが編集された時にTodoListFiltersも再renderingされる．\n// export default function TodoListApp() {\n//   return (\n//     <RecoilRoot>\n//       <TodoList />\n//     </RecoilRoot>\n//   );\n// }\n\n// function TodoList() {\n//   const todoList = useRecoilValue(todoListState);\n\n//   return (\n//     <>\n//       <div>Todo List</div>\n//       <TodoListStats />\n//       <TodoListFilters />\n//       <TodoItemCreator />\n\n//       {todoList.map((todoItem) => (\n//         <TodoItem key={todoItem.id} item={todoItem} />\n//       ))}\n//     </>\n//   );\n// }\n// =================================================================\n\n// NOTE: TodoItemのtextを編集しただけでも再レンダーされる．\nfunction TodoListStats() {\n  const {\n    totalNum,\n    totalCompletedNum,\n    totalUncompletedNum,\n    percentCompleted,\n  } = useRecoilValue(todoListStatsState);\n\n  const formattedPercentCompleted = Math.round(percentCompleted);\n\n  return (\n    <ul>\n      <li>Total items: {totalNum}</li>\n      <li>Items completed: {totalCompletedNum}</li>\n      <li>Items not completed: {totalUncompletedNum}</li>\n      <li>Percent completed: {formattedPercentCompleted}</li>\n    </ul>\n  );\n}\n\nfunction TodoListFilters() {\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\n\n  const updateFilter = ({target: {value}}) => {\n    setFilter(value);\n  };\n\n  return (\n    <>\n      Filter:\n      <select value={filter} onChange={updateFilter}>\n        <option value=\"Show All\">All</option>\n        <option value=\"Show Completed\">Completed</option>\n        <option value=\"Show Uncompleted\">Uncompleted</option>\n      </select>\n    </>\n  );\n}\n\nfunction TodoItemCreator() {\n  const [inputValue, setInputValue] = useState(''); // なぜatomを使わないのか？ local stateだからか？\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ]);\n    setInputValue('');\n  }\n\n  const onChange = ({target: {value}}) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Add</button>\n    </div>\n  )\n};\n\n// Dev Tool\nfunction DebugObserver() {\n  const snapshot = useRecoilSnapshot();\n\n  // 全atomの変更を観測\n  // useEffect(() => {\n  //   console.debug('The following atoms were modified:');\n  //   for (const node of snapshot.getNodes_UNSTABLE({isModified: true})) {\n  //     console.debug(node.key, snapshot.getLoadable(node));\n  //   }\n  // }, [snapshot]);\n\n  // todoListStatsStateの変更を観測\n  // const stats = snapshot.getLoadable(todoListStatsState);\n  // useEffect(() => {\n  //   console.debug('todoListStatsState is modified:', stats);\n  // }, [stats]);\n\n  return null;\n}\n\n// global 良くない\nlet id = 0;\nfunction getId() {\n  return id++;\n}\n\nfunction TodoItem({item}) {\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n  const index = todoList.findIndex((listItem) => listItem === item);\n\n  const editItemText = ({target: {value}}) => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      text: value,\n    });\n\n    setTodoList(newList);\n  };\n\n  const toggleItemCompletion = () => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      isComplete: !item.isComplete,\n    });\n\n    setTodoList(newList);\n  };\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index);\n\n    setTodoList(newList);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={item.text} onChange={editItemText} />\n      <input\n        type=\"checkbox\"\n        checked={item.isComplete}\n        onChange={toggleItemCompletion}\n      />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  );\n}\n\n// util func\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport TodoListApp from './TodoList/index';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <TodoListApp />,\n  document.getElementById('todoList')\n);"],"sourceRoot":""}